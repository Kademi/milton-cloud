<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="locations" >
			<list>
                <!-- Default properties, should run out of the box -->
				<value>classpath:spliffy-default.properties</value>
				
                <!-- This refers to an optional file which should be outside the WAR (ie in tomcat/shared/classes -->
                <!-- It contains environment specific configuration, such as database connection information -->
				<value>classpath:spliffy-env.properties</value>				
			</list>
		</property>
	</bean>

    <import resource="classpath:database.xml"/>
    
    <import resource="classpath:apps.xml"/>
    
    <!-- Another environment specific file. Default empty file is included, but create your own outside the WAR to 
    environment specific bean declarations
    -->
    <import resource="classpath:env.xml"/>

    <bean id="lock.manager" class="io.milton.http.fs.SimpleLockManager" />
            
    <bean id="hash.store" class="io.milton.vfs.content.DbHashStore"/>
    
    
    <bean id="password.manager" class="io.milton.cloud.server.manager.PasswordManager"/>

    <bean id="dao.user" class="io.milton.cloud.server.db.utils.UserDao"  >

    </bean>

    <bean id="security.manager" class="io.milton.cloud.server.web.SpliffySecurityManager">
        <constructor-arg ref="dao.user" />
        <constructor-arg ref="password.manager" />
    </bean>
            
    <bean id="event.manager" class="io.milton.event.EventManagerImpl"/>
    
    <bean id="current.root.folder.service" class="io.milton.cloud.server.manager.DefaultCurrentRootFolderService">
        <property name="primaryDomain" value="${primary.domain}"  />
    </bean>
        
    <bean id="content.type.service" class="io.milton.common.DefaultContentTypeService"/>
    
    <bean id="async.processor" class="io.milton.cloud.server.queue.impl.LocalAsynchProcessor" init-method="start">
        <constructor-arg ref="root.context" />
        <constructor-arg ref="session.manager" />
    </bean>
    
    <bean id="alt.format.generator" class="io.milton.cloud.server.web.alt.AltFormatGenerator">
        <constructor-arg ref="hash.store" />
        <constructor-arg ref="${id.blob.store}" />
        <constructor-arg ref="event.manager" /> 
        <constructor-arg ref="content.type.service" />
        <constructor-arg ref="root.context"/>
        <constructor-arg ref="session.manager"/>
        <property name="enableMetaData" value="${media.metadata}" />
    </bean>
        
    <bean id="main.spliffy.resource.factory" class="io.milton.cloud.server.web.SpliffyResourceFactory">
        <!--        
        <constructor-arg ref="lock.manager"/>
        -->        
        <constructor-arg ref="dao.user"/>
        <constructor-arg ref="security.manager"/>
        <constructor-arg ref="application.manager"/>        
        <constructor-arg ref="event.manager"/> 
        <constructor-arg ref="session.manager"/>
        <constructor-arg ref="current.root.folder.service"/>
    </bean>
       
    <bean id="sync.spliffy.resource.factory" class="io.milton.cloud.server.web.sync.SpliffySyncResourceFactory">
        <constructor-arg ref="hash.store" />
        <constructor-arg ref="${id.blob.store}" />
        <constructor-arg ref="security.manager" />
        <constructor-arg ref="current.root.folder.service" />
    </bean>
    
    <bean id="altformat.resource.factory" class="io.milton.cloud.server.web.alt.AltFormatResourceFactory">
        <constructor-arg ref="hash.store" />
        <constructor-arg ref="${id.blob.store}" />
        <constructor-arg ref="main.spliffy.resource.factory" />
        <constructor-arg ref="alt.format.generator" />
    </bean>    
    
    <bean id="root.context" class="io.milton.cloud.server.manager.MCRootContext">        
        <constructor-arg ref="servletContext" />        
        <constructor-arg ref="main.spliffy.resource.factory" />        
        <constructor-arg ref="hash.store"/>
        <constructor-arg ref="${id.blob.store}" />
        <constructor-arg ref="security.manager"/>
        <constructor-arg ref="application.manager"/>
        <constructor-arg ref="event.manager"/>
        <constructor-arg ref="content.type.service"/> 
        <constructor-arg>
            <list>
                <ref local="event.manager" />
                <ref local="current.root.folder.service"/>
            </list>
        </constructor-arg>
    </bean>       
        
    <!-- This will expose resources on the classpath, required for apps which have css/js files in the jar -->
    <bean id="classpath.resource.factory" class="io.milton.http.fs.ClassPathResourceFactory"></bean>
    
    <bean id="static.resource.factory" class="io.milton.servlet.StaticResourceFactory">
    </bean>
    
    <!-- Find resources from the servlet context, which do not pass through the filter via /static -->
    <bean id="web.resource.factory" class="io.milton.servlet.WebResourceFactory">
        <constructor-arg ref="config" /> <!-- injected by SpringMiltonFilter -->
        <property name="basePath" value="" />
    </bean>
    
    
    <bean id="apps.resource.factory" class="io.milton.cloud.server.web.resources.AppsResourceFactory">
        <constructor-arg ref="application.manager" />
    </bean>        
    
    <bean id="resource.factory" class="io.milton.http.MultipleResourceFactory">
        <constructor-arg>
            <list>
                <ref local="sync.spliffy.resource.factory" />
                <ref local="main.spliffy.resource.factory" />  
                <ref local="apps.resource.factory"/>
                <ref local="static.resource.factory" />
                <ref local="web.resource.factory" />
                <ref local="classpath.resource.factory" />                
                <ref local="altformat.resource.factory" />                
            </list>
        </constructor-arg>
    </bean>

    <bean id="open.session.in.view.filter" class="io.milton.cloud.server.db.utils.MiltonOpenSessionInViewFilter">
        <constructor-arg ref="session.manager"/>
        <constructor-arg ref="root.context" />
    </bean>
    
    <!-- This takes care of starting the ApplicationManager and RootContext. Is hooked into HttpManagerBuilder event to start -->
    <bean id="applicationStarter" class="io.milton.cloud.server.ApplicationStarter" destroy-method="stop">
        <constructor-arg ref="root.context" />
    </bean>    

    <bean id="milton.http.manager" class="io.milton.config.HttpManagerBuilder">
        <property name="listeners">
            <list>
                <ref local="applicationStarter" />
            </list>
        </property>
        <property name="mainResourceFactory" ref="resource.factory" /> 
        <property name="eventManager" ref="event.manager" />
        <property name="filters">
            <list>
                <ref local="open.session.in.view.filter" />
            </list>
        </property>        
        <property name="extraPropertySources">
            <list>
                <bean class="io.milton.cloud.server.web.ParameterisedResourcePropertySource"/>
            </list>
        </property>      
        <property name="loginPageTypeHandler">
            <bean class="io.milton.cloud.server.web.SpliffyLoginTypeHandler"/>
        </property>
        <property name="enabledCkBrowser" value="true"/>
    </bean>
    


    <!--
    <bean id="ftp.security.manager" class="com.ettrema.ftp.WrappingFtpSecurityManager">
        <constructor-arg ref="security.manager"/>
    </bean>
    -->

    <!-- Adapts the specified milton security manager to the FTP server -->
    <!--
    <bean id="ftp.user.manager" class="com.ettrema.ftp.UserManagerAdapter">
        <constructor-arg ref="resource.factory"/>
        <constructor-arg ref="ftp.security.manager"/>
    </bean>
    -->

    <!-- This server will provide access to the same resources available on webdav
    via FTP -->
    <!--
    <bean id="ftp.server" class="com.ettrema.ftp.MiltonFtpAdapter">
        <constructor-arg ref="resource.factory"/>
        <constructor-arg ref="ftp.user.manager"/>
    </bean>
    -->
      
</beans>