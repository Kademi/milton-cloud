package guiTool;



import io.milton.sync.SyncJob;
import java.awt.Color;
import static java.awt.image.ImageObserver.PROPERTIES;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;

/**
 *
 * @author ibraheem
 */
public final class updateJob extends javax.swing.JPanel {

    /**
     * Creates new form addJob
     */
    final String JOB = "job";
    DefaultComboBoxModel<String> modelRepositry, modelBranch;

    public updateJob(int index) {

        initComponents();
        num = index;
        modelRepositry = (DefaultComboBoxModel) combo_Repositry.getModel();
        modelBranch = (DefaultComboBoxModel) combo_Branch.getModel();
        updateField();

    }

    void updateField() {

        String localPathProperty = SyncToolTopComponent.jobFile.getProperty(JOB + "." + num + "." + "localPath");
        String repositryProperty = SyncToolTopComponent.jobFile.getProperty(JOB + "." + num + "." + "repositry");
        String branchProperty = SyncToolTopComponent.jobFile.getProperty(JOB + "." + num + "." + "branch");
        String userProperty = SyncToolTopComponent.jobFile.getProperty(JOB + "." + num + "." + "user");
        String passwordProperty = SyncToolTopComponent.jobFile.getProperty(JOB + "." + num + "." + "password");
        String LocalReadonlyProperty = SyncToolTopComponent.jobFile.getProperty(JOB + "." + num + "." + "LocalReadonly");
        String remoteAddressProperty = SyncToolTopComponent.jobFile.getProperty(JOB + "." + num + "." + "remoteAddress");

        txt_localPath.setText(localPathProperty);
        txt_remoteAddress.setText(remoteAddressProperty);
        txt_user.setText(userProperty);
        txt_password.setText(passwordProperty);
        local_read_only_CheckBox1.setSelected(Boolean.getBoolean(LocalReadonlyProperty));
        addToRepo(repositryProperty);
        addToBranch(branchProperty);

        combo_Repositry.setSelectedItem(repositryProperty);
        combo_Branch.setSelectedItem(branchProperty);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    void addToRepo(String item) {

        if ((modelRepositry).getIndexOf(item) == -1) {
            combo_Repositry.addItem(item);
        }
    }

    void addToBranch(String item) {

        if ((modelBranch).getIndexOf(item) == -1) {
            combo_Branch.addItem(item);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_localPath = new javax.swing.JTextField();
        txt_remoteAddress = new javax.swing.JTextField();
        txt_user = new javax.swing.JTextField();
        txt_password = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        local_read_only_CheckBox1 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        combo_Branch = new javax.swing.JComboBox<>();
        combo_Repositry = new javax.swing.JComboBox<>();
        btn_BrowseDirectory = new javax.swing.JButton();
        btn_ConnectToServer = new javax.swing.JButton();
        l_status = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        progress = new javax.swing.JProgressBar();

        jLabel1.setText("Local Path");

        jLabel2.setText("Remote Address");

        jLabel3.setText("User");

        txt_localPath.setEditable(false);
        txt_localPath.setBackground(new java.awt.Color(204, 204, 204));

        jLabel4.setText("Password");

        local_read_only_CheckBox1.setText("Local Read Only");
        local_read_only_CheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                local_read_only_CheckBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Repository");

        jLabel6.setText("Branch");

        combo_Repositry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_RepositryItemStateChanged(evt);
            }
        });

        btn_BrowseDirectory.setText("Browse");
        btn_BrowseDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BrowseDirectoryActionPerformed(evt);
            }
        });

        btn_ConnectToServer.setText("Connect");
        btn_ConnectToServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConnectToServerActionPerformed(evt);
            }
        });

        l_status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l_status.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txt_user, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(txt_localPath, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btn_BrowseDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(148, 148, 148)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txt_remoteAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btn_ConnectToServer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(l_status, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(local_read_only_CheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(combo_Repositry, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_Branch, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_localPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_BrowseDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_remoteAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_status, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_user, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ConnectToServer, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_Repositry, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_Branch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(local_read_only_CheckBox1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_BrowseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BrowseDirectoryActionPerformed
        // TODO add your handling code here:

        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        filechooser.setAcceptAllFileFilterUsed(false);
        //
        if (filechooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            localPath = filechooser.getSelectedFile().getAbsolutePath();
            txt_localPath.setText(localPath);
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_btn_BrowseDirectoryActionPerformed

    private void btn_ConnectToServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConnectToServerActionPerformed
        // TODO add your handling code here:
        l_status.setForeground(Color.BLACK);
        combo_Branch.removeAll();
        combo_Repositry.removeAll();
        doConnect();
    }//GEN-LAST:event_btn_ConnectToServerActionPerformed
    String query;
    private void combo_RepositryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_RepositryItemStateChanged
        // TODO add your handling code here:
        SwingWorker worker = new SwingWorker<Void, Integer>() {
            @Override
            protected synchronized Void doInBackground() throws Exception {
                String remotehost = txt_remoteAddress.getText();
                if (remoteAddress.endsWith("/")) {
                    remotehost = remoteAddress.substring(0, remoteAddress.length() - 1);
                }

                query = remotehost + "/repositories/" + combo_Repositry.getSelectedItem().toString() + "/_DAV/PROPFIND?fields=name";
                //    System.out.println("query braches   " + query);
                try {
                    String listBrache = Helper.readUrl(query, user, password);
                    ArrayList<String> list = Helper.getDataFromJson(listBrache);
                    combo_Branch.removeAllItems();
                    combo_Branch.addItem("");
                    for (int i = 1; i < list.size() - 2; i++) {
                        addToBranch(list.get(i));
                    }
                } catch (Exception ex) {
                    //   JOptionPane.showMessageDialog(txt_remoteAddress, ex.getMessage());
                }

                return null;
            }

            @Override
            protected void process(List< Integer> in) {

            }

            @Override
            protected void done() {

            }
        };
        if (!combo_Repositry.getSelectedItem().toString().isEmpty()) {

            worker.execute();
        }

    }//GEN-LAST:event_combo_RepositryItemStateChanged

    private void local_read_only_CheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_local_read_only_CheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_local_read_only_CheckBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_BrowseDirectory;
    private javax.swing.JButton btn_ConnectToServer;
    private javax.swing.JComboBox<String> combo_Branch;
    private javax.swing.JComboBox<String> combo_Repositry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel l_status;
    private javax.swing.JCheckBox local_read_only_CheckBox1;
    private javax.swing.JProgressBar progress;
    private javax.swing.JTextField txt_localPath;
    private javax.swing.JPasswordField txt_password;
    private javax.swing.JTextField txt_remoteAddress;
    private javax.swing.JTextField txt_user;
    // End of variables declaration//GEN-END:variables
String localPath, json, remoteAddress, user, password, query_repo, repositry, branch;
    boolean isdone;
    SyncJob syncJob;
    int num;

    public SyncJob doUpdateJob() {

        localPath = txt_localPath.getText();
        remoteAddress = txt_remoteAddress.getText();
        System.out.println("doAddJob   " + 1);
        if (!localPath.trim().isEmpty() && !combo_Repositry.getSelectedItem().toString().isEmpty() && !combo_Branch.getSelectedItem().toString().isEmpty()) {

            repositry = combo_Repositry.getSelectedItem().toString();
            branch = combo_Branch.getSelectedItem().toString();
            user = txt_user.getText();
            password = Arrays.toString(txt_password.getPassword());

            System.out.println("doAddJob   " + 1);
            try {
                if (Helper.checkInternet()) {

                    String q_host = remoteAddress + "repositories/" + combo_Repositry.getSelectedItem().toString() + "/" + combo_Branch.getSelectedItem().toString() + "/";
                    SyncToolTopComponent.wProperty(num, "localPath", localPath);
                    SyncToolTopComponent.wProperty(num, "remoteAddress", remoteAddress);
                    SyncToolTopComponent.wProperty(num, "repositry", repositry);
                    SyncToolTopComponent.wProperty(num, "branch", branch);
                    SyncToolTopComponent.wProperty(num, "user", user);
                    SyncToolTopComponent.wProperty(num, "password", password);
                    SyncToolTopComponent.wProperty(num, "LocalReadonly", String.valueOf(local_read_only_CheckBox1.isSelected()));

                  syncJob= new SyncJob(new File(localPath), q_host, user, password, true, local_read_only_CheckBox1.isSelected());

                    return syncJob;
                }
            } catch (Exception ex) {

                System.out.println("ex: " + ex.getMessage());

            }

        } else {
            System.out.println("");


        }
        return null;
    }

    void doConnect() {
        l_status.setText("Status");
        combo_Repositry.removeAll();
        combo_Branch.removeAll();
        SwingWorker worker = new SwingWorker<Void, Integer>() {
            @Override
            protected synchronized Void doInBackground() throws Exception {

                /*
                 * Here Thread sleeping used fot the testing purposes only
                 */
                publish(3);
                publish(5);
                publish(10);

                try {

                    remoteAddress = txt_remoteAddress.getText();
                    query_repo = remoteAddress + "/repositories/_DAV/PROPFIND?fields=name";
                    user = txt_user.getText();
                    password = Arrays.toString(txt_password.getPassword());

                    if (Helper.checkInternet()) {
                        json = Helper.readUrl(query_repo, user, password);
                        isdone = true;

                    } else {

                        isdone = false;
                    }

                } catch (Exception ex) {
                    //   JOptionPane.showMessageDialog(null, "Exception running monitor: " + ex.getMessage());
                    progress.setValue(0);

                    return null;
                }

                publish(30);

                publish(40);
                Thread.sleep(500);
                publish(50);
                Thread.sleep(500);
                publish(70);
                Thread.sleep(500);
                publish(85);
                Thread.sleep(500);
                publish(100);

                return null;
            }

            @Override
            protected void process(List< Integer> in) {
                progress.setValue(in.get(0));
            }

            @Override
            protected void done() {
                if (isdone == true) {
                    combo_Repositry.addItem("");
                    ArrayList<String> list = Helper.getDataFromJson(json);
                    list.remove(0);
                    for (int i = 0; i < list.size(); i++) {

                        addToRepo(list.get(i));

                    }
                    grayedField();
                    setProgress(PROPERTIES);
                    l_status.setText("Connected");
                    l_status.setForeground(Color.GREEN);
                } else {
                    l_status.setText("Failed");
                    l_status.setForeground(Color.RED);
                    this.setProgress(0);
                }
            }
        };

        if (checkFields()) {
            worker.execute();
        }
    }

    void grayedField() {
        txt_remoteAddress.setEditable(false);
        txt_password.setEditable(false);
        txt_user.setEditable(false);

    }

    boolean checkFields() {
        return !txt_remoteAddress.getText().trim().isEmpty()
                && !txt_user.getText().trim().isEmpty() && ! Arrays.toString(txt_password.getPassword()).trim().isEmpty();
    }

}
